#!/bin/bash

in=$1

# Get the input argument
if [ "$#" -eq  "0" ]; then
    echo "No arguments supplied"
    echo "Usage: llvm-to-elf input.ll [output.elf]"
    exit 1
fi

# Get the optional output elf file name
if [ -z "$2" ]; then
    out="$1.elf"
    echo "Output file: $out"
else
    out="$2"
fi


set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
ROOT="$DIR/.."

CFLAGS="-mthumb -mcpu=cortex-m4 -march=armv7e-m -mfloat-abi=soft --target=thumbv7em-unknown-none-gnu -I$ROOT/toolchain-arm/lib/include"
OPT="-O3"

# Find libgcc from the gcc arm toolchain
libgcc_loc=$(arm-none-eabi-gcc -print-libgcc-file-name)
libgcc_loc=$(dirname "$libgcc_loc")

LDFLAGS="-mcpu=cortex-m4 -march=armv7e-m -mfloat-abi=soft \
 --target=thumbv7em-unknown-none-eabi -nodefaultlibs \
 \
 -Wl,--Bstatic -Wl,-lc_nano -Wl,-lnosys -Wl,--gc-sections,--entry,Reset_Handler\
 -Wl,-lgcc"

LIBLOCS="-L$ROOT/toolchain-arm/lib/gcc -L$ROOT/toolchain-arm/lib/libc -L$ROOT/toolchain-arm"
LINKERSCRIPT="$ROOT/toolchain-arm/linkerscript.ld"

# Idempotent compile args:
CODEGEN_FLAGS="\
--idemp-stack-spill-hitting-set \
--idemp-force-lr-spill \
--idemp-code-gen \
--idemp-pop \
--idemp-checkpoint-reason-markers \
"

# Compile the .ll file
#clang -c -mllvm --idemp-debug $CFLAGS $CODEGEN_FLAGS $OPT $in -o $in.obj
llc --idemp-debug $CODEGEN_FLAGS -filetype=obj $OPT -O=3 -o $in.obj $in

# Compile startup.c
#clang -c $CFLAGS $OPT $ROOT/toolchain-arm/startup.c -o startup.obj

# Compile checkpoint.c
clang -c $CFLAGS $ROOT/toolchain-arm/checkpoint/checkpoint.c -o checkpoint.obj

# Link
#clang $LDFLAGS $LIBLOCS  -T $LINKERSCRIPT -lc -lm $in.obj startup.obj checkpoint.obj -o $out
clang $LDFLAGS $LIBLOCS  -T $LINKERSCRIPT -lc -lm $in.obj checkpoint.obj -o $out

# Disassemble
arm-none-eabi-objdump -d $out > $in.s

# Cleanup
#rm -rf $in.obj startup.obj
rm -rf startup.obj
